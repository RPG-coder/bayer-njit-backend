var express = require('express');
var router = express.Router();
var userController = require('../controllers/users.controller');
var preferenceController = require('../controllers/preferences.controller');


/* Route: /users (via. app.use('\users') ) */
router.put('/', function(req, res, next) {
  /** 
   * GET /users is used to check if user exist and return userData as response.
   * Generates new uniquely identified auth-token for retaining it in user's cookie, to maintain a secure login state.
   * Updates database with user login=true and generating new auth-token (using uuid, for now).
   * @route /users
   * @method put
   * @param {JSON} res - request message of format {userid,password} 
   * @param {JSON} req - response message for which function will generate, userData = {success: isLogged, userData: {userid, fullName, email, authToken}, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
  */ 

  userController.login(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });

}); router.put('/login', function(req, res, next) {
  /** 
   * Alternative to GET /users route
   * @route /users/login
   * @method put
   * @param {JSON} req - request message of format {userid,password}
   * @param {JSON} res - response message for which function will generate, userData = {success: isLogged, userData: {userid, fullName, email, authToken}, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */

  userController.login(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });

});
router.post('/', function(req, res, next) {
  /**
   * POST /users is used to create a new user with userid and responds with the login state immediately.
   * Creates a record using request data along with a new auth-token, isLogged, createdAt and updatedAt.
   * Generates new uniquely identified auth-token for retaining it in user's cookie, to maintain a secure login state.
   * Updates database with user login=true and generating new auth-token (using uuid, for now).
   * @route /users
   * @method: post
   * @method post
   * @param {JSON} req - request message of format {userid,password,fullname, email} 
   * @param {JSON} res - response message for which function will genereate, userData = {success: isLogged, userData: {userid, fullName, email, authToken}, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */

  userController.register(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });

});router.post('/register', function(req, res, next) {
  /**
   * Alternative to POST /users
   * @route /users/register
   * @method post
   * @param {JSON} req - request message of format {userid,password,fullname, email} 
   * @param {JSON} res - response message for which function will genereate, userData = {success: isLogged, userData: {userid, fullName, email, authToken}, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */

   userController.register(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });

});
router.post('/logout', function(req, res, next) {
  /**
   * Users will be logged out and the session will be ended. 
   * The user, upon logout, will no longer have their access until a new accessToken is generated by logging in.
   * @route /users/logout
   * @method post
   * @param {JSON} req - request message of format {userid,authToken}
   * @param {JSON} res - response message for which function will generate, statusMessage = {success: !isLogged, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */


   userController.logOut(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });
});

/* ------------------------------------------------------------------------------- */

/* Route: /user/preferences */
router.get('/preferences', function(req, res, next) {
  /**
   * Get a list of preferences, specific to a user with userid. jsonData contains the filter values stored at mySQL end.
   * @route /users/preferences
   * @method get
   * @param {JSON} req - request message of format {userid, authToken} 
   * @param {JSON} res - response message for which function will generate, userPreferences = {userid, preferenceData : [ userPref1: {preferenceId, savedName, jsonData}, userPref2, ... ] }
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */
   preferenceController.getPreferences(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });

});
router.post('/preferences', function(req, res, next) {
  /**
   * POST /preferences is used to create a new preference belonging to user with userid.
   * Responds the success with message for the creation operation.
   * @route /users/preferences
   * @method post
   * @param {JSON} req - request message of format {userid, authToken,  saveName, jsonData}
   * @param {JSON} res - response message for which function will generate, statusMessage = {success, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */
   preferenceController.createPreference(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });
});
router.put('/preferences', function(req, res, next) {
  /**
   * POST /preferences is used to update an existing preference belonging to user with userid.
   * Responds the success with message for the update operation
   * @route /users/preferences
   * @method put
   * @param {JSON} req - request message of format {userid, authToken,  preferenceId, jsonData}
   * @param {JSON} res - response message for which function will generate, statusMessage = {success, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */
   preferenceController.editPreference(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });
});
router.delete('/preferences', function(req, res, next) {
  /**
   * POST /preferences is used to delete an existing preference belonging to user with userid.
   * Responds the success with message for the delete operation.
   * Note this is a soft (paranoid) delete operation
   * @route /users/preferences
   * @method delete
   * @param {JSON} req - request message of format {userid, authToken,  preferenceId}
   * @param {JSON} res - response message for which function will generate, statusMessage = {success, message}
   * @returns {void} - nothing, instead sends a response to the client of format specified in res
   */
   preferenceController.deletePreference(req).then((response)=>{
    console.log(`Sending: ${response}`);
    res.status(response.status).send(response);
  });;
});


/* History Code here ... */

module.exports = router;
